(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{427:function(e,t,r){"use strict";r.r(t);var s=r(29),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"数据劫持"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据劫持"}},[e._v("#")]),e._v(" 数据劫持")]),e._v(" "),r("h2",{attrs:{id:"vue2-数据劫持的原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue2-数据劫持的原理"}},[e._v("#")]),e._v(" Vue2 数据劫持的原理")]),e._v(" "),r("p",[e._v("数据劫持核心是 defineReactive 函数，里面主要使用 Object.defineProperty 来对对象访问器 getter 和 setter 进行劫持。数据变更时 set 函数里面可以通知视图更新")]),e._v(" "),r("p",[e._v("在使用 Object.defineProperty 进行数据劫持的时候，对象和数组是分开处理的：对象是遍历对象属性之后进行递归劫持；数组是重写数组的原型方法比如 splice。这个我看了一些源码和资料。Object.defineProperty 本身是可以监控到数组下标的变化的，但尤大在 github issue 回复过从性能/体验的性价比考虑弃用了这种对数组的劫持方案。举例子就是对象属性通常比较少对每一个属性劫持不会消耗太多性能，但数组可能有成千上万个元素，如果每一个元素都劫持，无疑消耗过多性能")]),e._v(" "),r("h2",{attrs:{id:"vue2-数据劫持的缺陷"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue2-数据劫持的缺陷"}},[e._v("#")]),e._v(" Vue2 数据劫持的缺陷")]),e._v(" "),r("p",[e._v("第一个缺陷是由于 Vue2 数据劫持底层是用 ES5 的 Object.defineProperty 实现的，所以不兼容 IE8 以下")]),e._v(" "),r("p",[e._v("第二个缺陷是 Vue2 数据劫持无法检测数组和对象的变化，只会劫持一开始存在 data 选项里面的数据，这就是官网建议我们把可能要使用的数据一开始声明在 data 里面并提供初始值。对象新增属性可以通过 Vue.$set() 进行数据劫持，数组新增元素也可以通过 Vue.$set()，或者因为数组原型方法已经被重写了可以用 splice、push、unshift 等方法新增元素")]),e._v(" "),r("h2",{attrs:{id:"vue3-数据劫持的优势"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue3-数据劫持的优势"}},[e._v("#")]),e._v(" Vue3 数据劫持的优势")]),e._v(" "),r("p",[e._v("Vue3 数据劫持底层主要是使用 ES6 的 Proxy 实现")]),e._v(" "),r("p",[e._v("Proxy 的优势如下:")]),e._v(" "),r("ul",[r("li",[e._v("Proxy 可以直接监听对象（const proxy = new Proxy(target, handler)）；defineProperty 需要遍历对象属性进行监听")]),e._v(" "),r("li",[e._v("Proxy 可以直接监听对象新增的属性；defineProperty 只能劫持一开始就存在的属性，新增属性需要手动 Observer")]),e._v(" "),r("li",[e._v("Proxy 可以直接监听数组的变化；defineProperty 无法监听数组的变化")]),e._v(" "),r("li",[e._v("Proxy 有多达 13 种拦截方法：不限于 get、set、has、deleteProperty、apply、ownKeys、construct 等等；除开 get 和 set 其他都是 defineProperty 不具备的")]),e._v(" "),r("li",[e._v("Proxy 返回的是一个新对象，我们可以只操作新的对象达到目的；defineProperty 只能遍历对象属性直接修改")])]),e._v(" "),r("p",[e._v("Proxy 的劣势如下:")]),e._v(" "),r("ul",[r("li",[e._v("ES6 的 Proxy 的存在浏览器兼容性问题")])]),e._v(" "),r("blockquote",[r("p",[e._v("Proxy 和 Reflect 结合实现 Vue3 底层数据劫持原理。Reflect 设计的目的是为了优化 Object 的一些操作方法以及合理的返回 Object 操作返回的结果，对于一些命令式的 Object 行为，Reflect 对象可以将其变为函数式的行为。比如 （'name' in obj） = Reflect.has(obj, 'name')")])])])}),[],!1,null,null,null);t.default=a.exports}}]);