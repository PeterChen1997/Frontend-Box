(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{480:function(a,v,t){"use strict";t.r(v);var _=t(29),r=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[a._v("#")]),a._v(" GraphQL")]),a._v(" "),t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("p",[t("strong",[a._v("Graph + Query Language = 图 + 查询语言")])]),a._v(" "),t("h2",{attrs:{id:"传统的-rest-接口规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统的-rest-接口规范"}},[a._v("#")]),a._v(" 传统的 REST 接口规范")]),a._v(" "),t("p",[a._v("Representational State Transfer 具象状态传输")]),a._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("ul",[t("li",[a._v("不多说明")])]),a._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),t("ul",[t("li",[a._v("不够原子化，接口粒度不可控")]),a._v(" "),t("li",[a._v("逻辑交纵复杂，后端接口逻辑不好维护\n"),t("ul",[t("li",[a._v("团队人数与维护成本呈正项分布关系")])])]),a._v(" "),t("li",[a._v("变更接口成本高\n"),t("ul",[t("li",[a._v("新增字段")]),a._v(" "),t("li",[a._v("删减字段")])])]),a._v(" "),t("li",[a._v("前端需要知道所有服务的位置")])]),a._v(" "),t("h2",{attrs:{id:"graphql-技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphql-技术"}},[a._v("#")]),a._v(" GraphQL 技术")]),a._v(" "),t("h3",{attrs:{id:"优点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("ul",[t("li",[t("p",[t("strong",[a._v("自带文档")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("双向数据校验")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("会自动做类型转换")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('```jsx\n{\n  "errors": [\n    {\n      "message": "Int cannot represent non-integer value: \\"厉害了\\"",\n      "locations": [\n        {\n          "line": 4,\n          "column": 5\n        }\n      ],\n      "path": [\n        "user",\n        "id"\n      ]\n    }\n  ],\n  "data": {\n    "hello": "Hello, world!",\n    "user": {\n      "id": null,\n      "name": "123"\n    }\n  }\n}\n```\n')])])])])])]),a._v(" "),t("li",[t("p",[a._v("接口定义灵活，适合当前行业发展方向（快速迭代）")])]),a._v(" "),t("li",[t("p",[a._v("前端对于获取的数据拥有主导权")]),a._v(" "),t("ul",[t("li",[a._v("跨端")])])]),a._v(" "),t("li",[t("p",[a._v("简化请求，一次获取所有所需信息")]),a._v(" "),t("ul",[t("li",[a._v("例子：获取一本书的对象信息")]),a._v(" "),t("li",[a._v("步骤：\n"),t("ul",[t("li",[a._v("REST：id ⇒ book detail ⇒ author detail")]),a._v(" "),t("li",[a._v("GraphQL: id ⇒ book detail with author detail")])])])])]),a._v(" "),t("li",[t("p",[a._v("不用查看复杂的接口说明，看哪个接口怎么用，直接取我要的数据就行")]),a._v(" "),t("ul",[t("li",[a._v("如班课搜索接口")])])]),a._v(" "),t("li",[t("p",[a._v("通过缓存提升客户端性能（仅更新部分数据）")])])]),a._v(" "),t("h3",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),t("p",[a._v("先贴尤大的一段话：")]),a._v(" "),t("ol",[t("li",[a._v("GraphQL 的 field resolve 如果按照 naive 的方式来写，"),t("strong",[a._v("每一个 field 都对数据库直接跑一个 query，会产生大量冗余 query")]),a._v("，虽然网络层面的请求数被优化了，但数据库查询可能会成为性能瓶颈，这里面有很大的优化空间，但并不是那么容易做。"),t("strong",[a._v("FB 本身没有这个问题，因为他们内部数据库这一层也是抽象掉的，写 GraphQL 接口的人不需要顾虑 query 优化的问题")])]),a._v(" "),t("li",[a._v("GraphQL 的利好主要是在于前端的开发效率，"),t("strong",[a._v("但落地却需要服务端的全力配合")]),a._v("。如果是小公司或者整个公司都是全栈，那可能可以做，但在很多前后端分工比较明确的团队里，要推动 GraphQL 还是会遇到各种协作上的阻力")])]),a._v(" "),t("p",[a._v("除此之外，还有下列问题：")]),a._v(" "),t("ul",[t("li",[a._v("需要学习一套新的语法规范")]),a._v(" "),t("li",[a._v("与 REST 不同，服务端需要考虑其他的优化策略\n"),t("ul",[t("li",[a._v("考虑速率限制和定价")])])]),a._v(" "),t("li",[a._v("缓存比 REST 更复杂")]),a._v(" "),t("li",[a._v("跟后端服务一样需要完整的监控体系，这点前端很难做好")]),a._v(" "),t("li",[a._v("缓存体系、权限校验不同于 REST")]),a._v(" "),t("li",[a._v("API 用户可以用 API 做什么？如何用？什么样的用例好？什么样的不好？在哪里寻求帮助？如何对用户进行身份验证？需要 API 密钥吗？要使 API 文档能帮助 API 消费者使用，所需做的工作比向类型和字段添加描述要多得多")])])])}),[],!1,null,null,null);v.default=r.exports}}]);