(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{422:function(t,a,v){"use strict";v.r(a);var e=v(29),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"常见问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),v("h2",{attrs:{id:"实现自定义组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现自定义组件"}},[t._v("#")]),t._v(" 实现自定义组件")]),t._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MyTest "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./Test.vue'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Test "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Vue")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Vue"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Test'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyTest"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" Test\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("h2",{attrs:{id:"和-react-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#和-react-的区别"}},[t._v("#")]),t._v(" 和 React 的区别")]),t._v(" "),v("h3",{attrs:{id:"相同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点")]),t._v(" "),v("ul",[v("li",[t._v("都有组件化思想")]),t._v(" "),v("li",[t._v("都支持 ssr")]),t._v(" "),v("li",[t._v("都有 VDOM")]),t._v(" "),v("li",[t._v("都是数据驱动视图变化")]),t._v(" "),v("li",[t._v("都支持 native 化")]),t._v(" "),v("li",[t._v("都有自己的脚手架")])]),t._v(" "),v("h3",{attrs:{id:"不同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[t._v("#")]),t._v(" 不同点")]),t._v(" "),v("ul",[v("li",[t._v("数据流向不同。一个单向一个双向")]),t._v(" "),v("li",[t._v("数据变化实现不同。一个是不可变，一个是可变")]),t._v(" "),v("li",[t._v("组件化通信不同。Vue 支持传递事件")]),t._v(" "),v("li",[t._v("diff 算法不同。React 是完整 diff 后 patch，Vue 是边 diff 边 patch")])]),t._v(" "),v("h4",{attrs:{id:"react"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),v("ul",[v("li",[t._v("单项数据流")]),t._v(" "),v("li",[t._v("props对于子组件来说是必须的，因为它依赖一个“单一数据源”作为它的“状态”")]),t._v(" "),v("li",[t._v("React与Vue最大的不同是模板的编写")]),t._v(" "),v("li",[t._v("在React中你需要使用setState()方法去更新状态")]),t._v(" "),v("li",[t._v("React由如Facebook这类大公司维护")])]),t._v(" "),v("h4",{attrs:{id:"vue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),v("ul",[v("li",[t._v("数据双向绑定，双向数据流")]),t._v(" "),v("li",[t._v("Vue使用模板系统而不是JSX，使其对现有应用的升级更加容易,这是因为模板用的就是普通的HTML，通过Vue来整合现有的系统是比较容易的，不需要整体重构")]),t._v(" "),v("li",[t._v("在Vue中，数据由data属性在Vue对象中进行管理")])]),t._v(" "),v("h2",{attrs:{id:"为什么-v-if-v-show-不能混用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-v-if-v-show-不能混用"}},[t._v("#")]),t._v(" 为什么 v-if v-show 不能混用")]),t._v(" "),v("ul",[v("li",[t._v("先 for 后在进行 if 判断")]),t._v(" "),v("li",[t._v("可以在外层嵌套 template，进行 if 判断，之后再内部进行 for")])]),t._v(" "),v("h2",{attrs:{id:"为啥-data-是一个函数而不是对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为啥-data-是一个函数而不是对象"}},[t._v("#")]),t._v(" 为啥 data 是一个函数而不是对象")]),t._v(" "),v("ul",[v("li",[t._v("避免实例 data 相互影响")]),t._v(" "),v("li",[t._v("根实例 data 可以为对象")]),t._v(" "),v("li",[t._v("组件实例对象 data 必须为函数\n"),v("ul",[v("li",[t._v("initData 时会返回新 data 对象")])])])]),t._v(" "),v("h2",{attrs:{id:"动态新增-data-的对象新增属性会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#动态新增-data-的对象新增属性会发生什么"}},[t._v("#")]),t._v(" 动态新增 data 的对象新增属性会发生什么")]),t._v(" "),v("ul",[v("li",[t._v("由于没有触发依赖收集，没有派发更新")]),t._v(" "),v("li",[t._v("Vue3 使用 proxy 解决了此问题")])]),t._v(" "),v("h2",{attrs:{id:"vue-组件和插件的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件和插件的区别"}},[t._v("#")]),t._v(" vue 组件和插件的区别")]),t._v(" "),v("p",[t._v("插件是对 vue 功能的增强和补充")]),t._v(" "),v("ul",[v("li",[t._v("插件用于提供全局功能\n"),v("ul",[v("li",[t._v("全局方法或属性")]),t._v(" "),v("li",[t._v("全局资源")]),t._v(" "),v("li",[t._v("全局混入组件")]),t._v(" "),v("li",[t._v("添加 Vue 实例方法")])])]),t._v(" "),v("li",[t._v("区别\n"),v("ul",[v("li",[t._v("编写形式\n"),v("ul",[v("li",[t._v(".vue")]),t._v(" "),v("li",[t._v("install 方法")])])]),t._v(" "),v("li",[t._v("注册形式\n"),v("ul",[v("li",[t._v("全局、局部注册")]),t._v(" "),v("li",[t._v("Vue.use")])])]),t._v(" "),v("li",[t._v("使用场景")])])])]),t._v(" "),v("h2",{attrs:{id:"computed-的使用逻辑"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#computed-的使用逻辑"}},[t._v("#")]),t._v(" computed 的使用逻辑")]),t._v(" "),v("p",[t._v("对于任何复杂逻辑，你都应当使用计算属性，相对于非常便利的模板内的表达式，在模板中放入太多的逻辑会让模板过重且难以维护")]),t._v(" "),v("p",[t._v("并且计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值")]),t._v(" "),v("h2",{attrs:{id:"created-与-mounted的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#created-与-mounted的区别"}},[t._v("#")]),t._v(" created 与 mounted的区别")]),t._v(" "),v("ul",[v("li",[t._v("created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。")]),t._v(" "),v("li",[t._v("mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。\n其")])]),t._v(" "),v("h2",{attrs:{id:"组件间通信方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组件间通信方法"}},[t._v("#")]),t._v(" 组件间通信方法")]),t._v(" "),v("ul",[v("li",[t._v("props")]),t._v(" "),v("li",[t._v("$emit 传递事件")]),t._v(" "),v("li",[t._v("ref")]),t._v(" "),v("li",[t._v("EventBus - emit on")]),t._v(" "),v("li",[t._v("$parent、 $root (兄弟组件通信)")]),t._v(" "),v("li",[t._v("attrs listeners （祖先传递数据给子孙）")]),t._v(" "),v("li",[t._v("provide inject")]),t._v(" "),v("li",[t._v("Vuex")])]),t._v(" "),v("h2",{attrs:{id:"生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),v("h3",{attrs:{id:"创建前后"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建前后"}},[t._v("#")]),t._v(" 创建前后")]),t._v(" "),v("h4",{attrs:{id:"beforecreate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beforecreate"}},[t._v("#")]),t._v(" beforeCreate")]),t._v(" "),v("p",[t._v("在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用")]),t._v(" "),v("h4",{attrs:{id:"created"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#created"}},[t._v("#")]),t._v(" created")]),t._v(" "),v("p",[t._v("在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见")]),t._v(" "),v("h3",{attrs:{id:"载入前后"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#载入前后"}},[t._v("#")]),t._v(" 载入前后")]),t._v(" "),v("h4",{attrs:{id:"beforemount"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beforemount"}},[t._v("#")]),t._v(" beforeMount")]),t._v(" "),v("p",[t._v("在挂载开始之前被调用：相关的 render 函数首次被调用。")]),t._v(" "),v("p",[t._v("该钩子在服务器端渲染期间不被调用")]),t._v(" "),v("h3",{attrs:{id:"mounted"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mounted"}},[t._v("#")]),t._v(" mounted")]),t._v(" "),v("p",[t._v("el 被新创建的 vm.$ el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。")]),t._v(" "),v("p",[t._v("注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted")]),t._v(" "),v("h3",{attrs:{id:"更新前后"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#更新前后"}},[t._v("#")]),t._v(" 更新前后")]),t._v(" "),v("h4",{attrs:{id:"beforeupdate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beforeupdate"}},[t._v("#")]),t._v(" beforeUpdate")]),t._v(" "),v("p",[t._v("数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。")]),t._v(" "),v("p",[t._v("该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行")]),t._v(" "),v("h4",{attrs:{id:"updated"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#updated"}},[t._v("#")]),t._v(" updated")]),t._v(" "),v("p",[t._v("由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。")]),t._v(" "),v("p",[t._v("当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。")]),t._v(" "),v("p",[t._v("注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick 替换掉 updated")]),t._v(" "),v("h3",{attrs:{id:"销毁前后"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#销毁前后"}},[t._v("#")]),t._v(" 销毁前后")]),t._v(" "),v("h4",{attrs:{id:"beforedestory"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beforedestory"}},[t._v("#")]),t._v(" beforeDestory")]),t._v(" "),v("p",[t._v("实例销毁之前调用。在这一步，实例仍然完全可用")]),t._v(" "),v("p",[t._v("该钩子在服务器端渲染期间不被调用")]),t._v(" "),v("h4",{attrs:{id:"destoryed"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#destoryed"}},[t._v("#")]),t._v(" destoryed")]),t._v(" "),v("p",[t._v("Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁")]),t._v(" "),v("p",[t._v("该钩子在服务器端渲染期间不被调用")]),t._v(" "),v("h3",{attrs:{id:"keep-alive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[t._v("#")]),t._v(" keep-alive")]),t._v(" "),v("h4",{attrs:{id:"actived"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#actived"}},[t._v("#")]),t._v(" actived")]),t._v(" "),v("p",[t._v("keep-alive 组件激活时调用")]),t._v(" "),v("h4",{attrs:{id:"deactived"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#deactived"}},[t._v("#")]),t._v(" deactived")]),t._v(" "),v("p",[t._v("keep-alive 组件停用时调用")]),t._v(" "),v("h2",{attrs:{id:"vue-react的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-react的区别"}},[t._v("#")]),t._v(" Vue / React的区别")]),t._v(" "),v("h3",{attrs:{id:"相似点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相似点"}},[t._v("#")]),t._v(" 相似点")]),t._v(" "),v("ul",[v("li",[t._v("都为视图层框架，其他的功能如路由、状态管理等是框架分离的组件")]),t._v(" "),v("li",[t._v("都是用了virtual dom，支持ssr")]),t._v(" "),v("li",[t._v("都鼓励组件化，提高组件复用率")]),t._v(" "),v("li",[t._v("都有’props’的概念，props在组件中是一个特殊的属性，允许父组件往子组件传送数据")])]),t._v(" "),v("h2",{attrs:{id:"watch-computed"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#watch-computed"}},[t._v("#")]),t._v(" watch & computed")]),t._v(" "),v("ul",[v("li",[t._v("computed\n"),v("ul",[v("li",[t._v("支持缓存")]),t._v(" "),v("li",[t._v("不支持异步")]),t._v(" "),v("li",[t._v("依赖其他属性变更")]),t._v(" "),v("li",[t._v("支持 set get")])])]),t._v(" "),v("li",[t._v("watch\n"),v("ul",[v("li",[t._v("必须要与 data 中的属性名一致")]),t._v(" "),v("li",[t._v("函数有两个参数（new，old）")]),t._v(" "),v("li",[t._v("watch 不需要调用")]),t._v(" "),v("li",[t._v("只会监听值是否变更")]),t._v(" "),v("li",[t._v("无法监听正常数组操作")]),t._v(" "),v("li",[t._v("immediate: true，页面加载时执行")])])]),t._v(" "),v("li",[t._v("区别\n"),v("ul",[v("li",[t._v("一个是计算，一个是监听")]),t._v(" "),v("li",[t._v("是否有缓存")]),t._v(" "),v("li",[t._v("是否调用 return")])])])]),t._v(" "),v("h2",{attrs:{id:"mixin-created-的-data-合并策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mixin-created-的-data-合并策略"}},[t._v("#")]),t._v(" mixin created 的 data 合并策略")]),t._v(" "),v("ul",[v("li",[t._v("合并两个对象")]),t._v(" "),v("li",[t._v("冲突时组件数据优先")])]),t._v(" "),v("h2",{attrs:{id:"nexttick-的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nexttick-的理解"}},[t._v("#")]),t._v(" nextTick 的理解")]),t._v(" "),v("p",[t._v("DOM 更新循环结束后延迟执行回调，修改 DOM 后执行此操作可获得更新后的 DOM")]),t._v(" "),v("ul",[v("li",[t._v("根据判断进行实现\n"),v("ul",[v("li",[t._v("Promise.then")]),t._v(" "),v("li",[t._v("MutationObserver")]),t._v(" "),v("li",[t._v("setImmediate")]),t._v(" "),v("li",[t._v("setTimeout")])])])]),t._v(" "),v("h2",{attrs:{id:"对-mixin-的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对-mixin-的理解"}},[t._v("#")]),t._v(" 对 mixin 的理解")]),t._v(" "),v("p",[t._v("Vue 提供了一种复用组件逻辑的方式")]),t._v(" "),v("p",[t._v("本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods、created、computed等等")]),t._v(" "),v("h2",{attrs:{id:"slot-的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#slot-的理解"}},[t._v("#")]),t._v(" slot 的理解")]),t._v(" "),v("p",[t._v("在 HTML 中 slot 元素 ，作为 Web Components 技术套件的一部分，是Web组件内的一个占位符")]),t._v(" "),v("p",[t._v("通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理")]),t._v(" "),v("p",[t._v("通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用")]),t._v(" "),v("h3",{attrs:{id:"分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),v("p",[t._v("slot可以分来以下三种：")]),t._v(" "),v("ul",[v("li",[t._v("默认插槽")]),t._v(" "),v("li",[t._v("具名插槽")]),t._v(" "),v("li",[t._v("作用域插槽")])]),t._v(" "),v("h2",{attrs:{id:"key-的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#key-的原理"}},[t._v("#")]),t._v(" key 的原理")]),t._v(" "),v("p",[t._v("vdom diff")]),t._v(" "),v("h2",{attrs:{id:"keep-alive-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-是什么"}},[t._v("#")]),t._v(" keep-alive 是什么")]),t._v(" "),v("p",[t._v("内置组件，将组件切换保存在内存中，防止重复渲染 DOM")]),t._v(" "),v("p",[t._v("可设置属性：")]),t._v(" "),v("ul",[v("li",[t._v("include：正则或字符串匹配")]),t._v(" "),v("li",[t._v("exclude")]),t._v(" "),v("li",[t._v("max：最多缓存")])]),t._v(" "),v("p",[t._v("缓存后如何获取数据")]),t._v(" "),v("ul",[v("li",[t._v("beforeRouteEnter")]),t._v(" "),v("li",[t._v("actived")])]),t._v(" "),v("h2",{attrs:{id:"修饰符的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修饰符的作用"}},[t._v("#")]),t._v(" 修饰符的作用")]),t._v(" "),v("ul",[v("li",[t._v("表单修饰符\n"),v("ul",[v("li",[t._v("lazy，操作完毕后赋值给 val")]),t._v(" "),v("li",[t._v("trim，清空首空格")]),t._v(" "),v("li",[t._v("number，尝试转换为 number")])])]),t._v(" "),v("li",[t._v("时间修饰符\n"),v("ul",[v("li",[t._v("stop")]),t._v(" "),v("li",[t._v("prevent")]),t._v(" "),v("li",[t._v("self")]),t._v(" "),v("li",[t._v("once")]),t._v(" "),v("li",[t._v("capture")]),t._v(" "),v("li",[t._v("passive")]),t._v(" "),v("li",[t._v("native")])])]),t._v(" "),v("li",[t._v("鼠标修饰符\n"),v("ul",[v("li",[t._v("left")]),t._v(" "),v("li",[t._v("right")]),t._v(" "),v("li",[t._v("middle")])])]),t._v(" "),v("li",[t._v("键盘修饰符\n"),v("ul",[v("li",[t._v("enter tab ...")]),t._v(" "),v("li",[t._v("ctrl ...")])])]),t._v(" "),v("li",[t._v("bind 修饰符\n"),v("ul",[v("li",[t._v("async")]),t._v(" "),v("li",[t._v("prop")]),t._v(" "),v("li",[t._v("camel")])])])]),t._v(" "),v("h2",{attrs:{id:"自定义指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),v("p",[t._v("在vue中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统")]),t._v(" "),v("p",[t._v("除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令")]),t._v(" "),v("p",[t._v("实现：")]),t._v(" "),v("ul",[v("li",[t._v("全局注册主要是通过Vue.directive方法进行注册")]),t._v(" "),v("li",[t._v("局部注册同组件注册")])]),t._v(" "),v("h2",{attrs:{id:"过滤器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("类似于 angular 中的 pipe")])]),t._v(" "),v("li",[v("p",[t._v("也支持局部注册、全局注册")])]),t._v(" "),v("li",[v("p",[t._v("支持串联操作")])]),t._v(" "),v("li")])])}),[],!1,null,null,null);a.default=_.exports}}]);