(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{494:function(v,_,l){"use strict";l.r(_);var i=l(29),a=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"数据结构学习笔记"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数据结构学习笔记"}},[v._v("#")]),v._v(" 数据结构学习笔记")]),v._v(" "),l("h2",{attrs:{id:"复杂度分析"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[v._v("#")]),v._v(" 复杂度分析")]),v._v(" "),l("h3",{attrs:{id:"时间复杂度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[v._v("#")]),v._v(" 时间复杂度")]),v._v(" "),l("ul",[l("li",[v._v("代码执行时间T(n)和代码执行次数成正比")]),v._v(" "),l("li",[v._v("大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度")]),v._v(" "),l("li",[v._v("分析时间复杂度，只关注执行次数最多的一段代码")]),v._v(" "),l("li",[v._v("加法法则：总复杂度等于量级最大的那段代码的复杂度")]),v._v(" "),l("li",[v._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")]),v._v(" "),l("li",[v._v("复杂度量级\n"),l("ul",[l("li",[v._v("多项式量级\n"),l("ul",[l("li",[v._v("常数 1")]),v._v(" "),l("li",[v._v("对数 logn")]),v._v(" "),l("li",[v._v("线性 n")]),v._v(" "),l("li",[v._v("线性对数 nlogn")]),v._v(" "),l("li",[v._v("平方 n^2")]),v._v(" "),l("li",[v._v("立方 n^3")]),v._v(" "),l("li",[v._v("k次方 n^k")])])]),v._v(" "),l("li",[v._v("非多项式量级（NP（Non-Deterministic Polynomial，非确定多项式）问题）\n"),l("ul",[l("li",[v._v("指数阶 2^n")]),v._v(" "),l("li",[v._v("阶乘 n!")])])])])]),v._v(" "),l("li",[v._v("分类\n"),l("ul",[l("li",[v._v("最好情况时间复杂度")]),v._v(" "),l("li",[v._v("最坏情况时间复杂度")]),v._v(" "),l("li",[v._v("平均情况时间复杂度")]),v._v(" "),l("li",[v._v("均摊时间复杂度\n"),l("ul",[l("li",[v._v("特殊的平均时间复杂度")]),v._v(" "),l("li",[v._v("均摊耗时的操作到o(1)上")])])])])])]),v._v(" "),l("h2",{attrs:{id:"数组"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),l("ul",[l("li",[v._v("数组是一种线性表数据结构")]),v._v(" "),l("li",[v._v("用一组连续的内存空间，存储同类型数据")]),v._v(" "),l("li",[v._v("和链表的关系\n"),l("ul",[l("li",[v._v("数组支持随机访问，时间复杂度o(1)，但是插入删除较为低效，平均情况时间复杂度为 O(n)")]),v._v(" "),l("li",[v._v("链表适合增删结点，时间复杂度o(1)")])])])]),v._v(" "),l("h2",{attrs:{id:"链表"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[v._v("#")]),v._v(" 链表")]),v._v(" "),l("ul",[l("li",[v._v("经典场景（LRU内存淘汰算法）")]),v._v(" "),l("li",[v._v("插入和删除数据非常快，但随机访问效率低")]),v._v(" "),l("li",[v._v("类型\n"),l("ul",[l("li",[v._v("单链表")]),v._v(" "),l("li",[v._v("双向链表\n"),l("ul",[l("li",[v._v("支持o(1)找到前驱结点")])])]),v._v(" "),l("li",[v._v("循环链表")]),v._v(" "),l("li",[v._v("双向循环链表")])])]),v._v(" "),l("li",[v._v("双向链表比单链表使用场景多，是空间换时间的典型")]),v._v(" "),l("li",[v._v("检查代码的边界条件：\n"),l("ul",[l("li",[v._v("链表为空")]),v._v(" "),l("li",[v._v("链表只包含一个节点")]),v._v(" "),l("li",[v._v("链表只包含两个节点")]),v._v(" "),l("li",[v._v("处理头尾节点")])])])]),v._v(" "),l("h2",{attrs:{id:"栈"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[v._v("#")]),v._v(" 栈")]),v._v(" "),l("ul",[l("li",[v._v("栈是一种操作受限的数据结构，只支持入栈和出栈操作")]),v._v(" "),l("li",[v._v("栈可以用来计算表达式\n"),l("ul",[l("li",[v._v("使用两个栈（符号 / 数值）")]),v._v(" "),l("li",[v._v("遇到低优先级的符号，则数值出栈计算")]),v._v(" "),l("li",[v._v("然后继续比较前一个符号与当前符号的优先级")])])])]),v._v(" "),l("h2",{attrs:{id:"队列"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[v._v("#")]),v._v(" 队列")]),v._v(" "),l("ul",[l("li",[v._v("队列是一种操作受限的数据结构，只支持入队和出队操作")]),v._v(" "),l("li",[v._v("队列出队，指针后移，会导致可用空间和剩余空间不对齐，可以改造入队函数，在入队时搬移数据即可")]),v._v(" "),l("li",[v._v("特殊队列\n"),l("ul",[l("li",[v._v("循环队列：可以解决上面说的搬移问题，但是队尾没法放置元素")]),v._v(" "),l("li",[v._v("阻塞队列：队头没有元素的时候阻塞出队操作")]),v._v(" "),l("li",[v._v("并发队列：入队出队操作加锁")])])]),v._v(" "),l("li",[v._v("线程池等待实现：\n"),l("ul",[l("li",[v._v("链式队列：无限排队的无界队列")]),v._v(" "),l("li",[v._v("数组实现的有界队列：超过队列长度的请求被拒绝")])])])]),v._v(" "),l("h2",{attrs:{id:"递归"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[v._v("#")]),v._v(" 递归")]),v._v(" "),l("ul",[l("li",[v._v("递归需要满足三个条件：\n"),l("ul",[l("li",[v._v("可以被分解为子问题")]),v._v(" "),l("li",[v._v("子问题求解思路完全一致")]),v._v(" "),l("li",[v._v("存在递归终止条件")])])]),v._v(" "),l("li",[v._v("典型题目：爬楼梯\n"),l("ul",[l("li",[v._v("f(n) = f(n-1) + f(n-2)")])])]),v._v(" "),l("li",[v._v("递归需要避免重复计算")]),v._v(" "),l("li",[v._v("递归可以优化为迭代循环的非递归写法")])]),v._v(" "),l("h2",{attrs:{id:"排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[v._v("#")]),v._v(" 排序")]),v._v(" "),l("h3",{attrs:{id:"冒泡排序-bubble-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序-bubble-sort"}},[v._v("#")]),v._v(" 冒泡排序 Bubble Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作")]),v._v(" "),l("li",[v._v("优化：如果一轮冒泡操作中没有数据交换时，说明已经达到完全有序，不需要继续后续的冒泡操作了")]),v._v(" "),l("li",[v._v("空间复杂度：O(1)，是一个原地排序算法")]),v._v(" "),l("li",[v._v("稳定性：是稳定性算法，值相等时不交换")]),v._v(" "),l("li",[v._v("时间复杂度：\n"),l("ul",[l("li",[v._v("最好情况下：数据有序，O(n)")]),v._v(" "),l("li",[v._v("最坏情况下：o(n^2)")]),v._v(" "),l("li",[v._v("平均时间复杂度：就是加权平均期望时间复杂度，O(n^2)\n"),l("ul",[l("li",[v._v("可以通过 "),l("strong",[v._v("有序度")]),v._v(" 和 "),l("strong",[v._v("逆序度")]),v._v(" 来分析\n"),l("ul",[l("li",[v._v("有序度：即为有序元素对的个数\n"),l("ul",[l("li",[v._v("满有序度： n*(n-1)/2")])])]),v._v(" "),l("li",[v._v("逆序度 = 满有序度 - 有序度")])])])])])])])]),v._v(" "),l("h3",{attrs:{id:"插入排序-insertion-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#插入排序-insertion-sort"}},[v._v("#")]),v._v(" 插入排序 Insertion Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：动态地往有序集合中添加数据")]),v._v(" "),l("li",[v._v("空间复杂度：O(1)，是一个原地排序算法")]),v._v(" "),l("li",[v._v("稳定性：是稳定性算法，值相等时向后插入")]),v._v(" "),l("li",[v._v("时间复杂度：\n"),l("ul",[l("li",[v._v("最好情况下：数据有序，从后往前遍历插入区间，O(n)")]),v._v(" "),l("li",[v._v("最坏情况下：o(n^2)")])])]),v._v(" "),l("li",[v._v("和冒泡排序相比，虽然时间复杂度相同，但是赋值操作较少，更为推荐")])]),v._v(" "),l("h3",{attrs:{id:"选择排序-selection-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#选择排序-selection-sort"}},[v._v("#")]),v._v(" 选择排序 Selection Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾")]),v._v(" "),l("li",[v._v("空间复杂度：O(1)，是一个原地排序算法")]),v._v(" "),l("li",[v._v("稳定性：不稳定，在交换过程中，会导致")]),v._v(" "),l("li",[v._v("时间复杂度：\n"),l("ul",[l("li",[v._v("最好情况下：o(n^2)")]),v._v(" "),l("li",[v._v("最坏情况下：o(n^2)")])])])]),v._v(" "),l("h3",{attrs:{id:"归并排序-merge-sort-递归"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#归并排序-merge-sort-递归"}},[v._v("#")]),v._v(" 归并排序 Merge Sort （递归）")]),v._v(" "),l("ul",[l("li",[v._v("定义：归并排序使用的就是分治思想，通过分解再合并，即能完成排序要求")]),v._v(" "),l("li",[v._v("稳定性：稳定，控制合并逻辑即可")]),v._v(" "),l("li",[v._v("时间复杂度：\n"),l("ul",[l("li",[v._v("递归的时间复杂度分析：T(a) = T(b) + T(c) + K")]),v._v(" "),l("li",[v._v("O(nlogn)")]),v._v(" "),l("li",[v._v("不管是最好情况、最坏情况，还是平均情况，时间复杂度都是 O(nlogn)")])])]),v._v(" "),l("li",[v._v("空间复杂度：O(n)，递归过程中只会有一个函数在执行，所以不是nlogn")]),v._v(" "),l("li",[v._v("merge函数功能：\n"),l("ul",[l("li",[v._v("按序合并数组")])])])]),v._v(" "),l("h3",{attrs:{id:"快速排序-quick-sort-递归"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-quick-sort-递归"}},[v._v("#")]),v._v(" 快速排序 Quick Sort （递归）")]),v._v(" "),l("ul",[l("li",[v._v("定义：选一个区分点，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间，经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的")]),v._v(" "),l("li",[v._v("空间复杂度：O(1)，是一个原地排序算法")]),v._v(" "),l("li",[v._v("稳定性：不稳定，涉及交换")]),v._v(" "),l("li",[v._v("partion函数功能：\n"),l("ul",[l("li",[v._v("将数组按照定义组织，跟插入排序类似")])])]),v._v(" "),l("li",[v._v("时间复杂度：o(nlogn)\n"),l("ul",[l("li",[v._v("但是如果分区元素选的不好，会退化为o(n^2)")])])])]),v._v(" "),l("blockquote",[l("p",[v._v("归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题\n求解第K大数据的时间复杂度是O(n)，可以用快排的思路来分析")])]),v._v(" "),l("h3",{attrs:{id:"桶排序-bucket-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#桶排序-bucket-sort"}},[v._v("#")]),v._v(" 桶排序 Bucket Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了")]),v._v(" "),l("li",[v._v("时间复杂度：O(n)")]),v._v(" "),l("li",[v._v("要求：\n"),l("ul",[l("li",[v._v("桶排序比较适合用在外部排序中")]),v._v(" "),l("li",[v._v("桶的顺序是有序的")])])]),v._v(" "),l("li",[v._v("注意点：\n"),l("ul",[l("li",[v._v("桶内数据如果不均分，则容易退化为O(nlogn)\n"),l("ul",[l("li",[v._v("可以通过继续分桶来解决")])])])])])]),v._v(" "),l("h3",{attrs:{id:"计数排序-counting-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#计数排序-counting-sort"}},[v._v("#")]),v._v(" 计数排序 Counting Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间")]),v._v(" "),l("li",[v._v("计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。而且，")]),v._v(" "),l("li",[v._v("计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数（因为需要对应数组下标）")]),v._v(" "),l("li",[v._v("时间复杂度：O(n)")])]),v._v(" "),l("h3",{attrs:{id:"基数排序-radix-sort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基数排序-radix-sort"}},[v._v("#")]),v._v(" 基数排序 Radix Sort")]),v._v(" "),l("ul",[l("li",[v._v("定义：先按照最后一位来排序手机号码，然后，再按照倒数第二位重新排序，以此类推，最后按照第一位重新排序。经过 11 次排序之后，手机号码就都有序了")]),v._v(" "),l("li",[v._v("排序算法一定要是稳定的，否则会打乱之前的排序结果")]),v._v(" "),l("li",[v._v("基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了")]),v._v(" "),l("li",[v._v("每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了")])]),v._v(" "),l("h3",{attrs:{id:"实现高性能排序算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#实现高性能排序算法"}},[v._v("#")]),v._v(" 实现高性能排序算法")]),v._v(" "),l("ul",[l("li",[v._v("线性排序不适用，归并排序和快速排序中选择快排，因为归并排序需要占用额外空间")]),v._v(" "),l("li",[v._v("快速排序的时间复杂度恶化问题需要解决\n"),l("ul",[l("li",[v._v("原因在于选取的分区点不合理，希望是分开的两侧数据量差不多，下面有几种方法解决这个问题：\n"),l("ul",[l("li",[v._v("三数取中法\n"),l("ul",[l("li",[v._v("首、尾、中间选取一个数，将中间值设置为分区点")]),v._v(" "),l("li",[v._v("可以根据数据量，调整取数逻辑")])])]),v._v(" "),l("li",[v._v("随机法")])])])])])]),v._v(" "),l("h4",{attrs:{id:"举例分析-qsort"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#举例分析-qsort"}},[v._v("#")]),v._v(" 举例分析 qsort()")]),v._v(" "),l("ul",[l("li",[v._v("qsort() 会优先使用归并排序来排序输入数据")]),v._v(" "),l("li",[v._v("要排序的数据量比较大的时候，qsort() 会改为用快速排序算法来排序\n"),l("ul",[l("li",[v._v("qsort() 选择分区点的方法就是“三数取中法”")])])]),v._v(" "),l("li",[v._v("当要排序的区间中，元素的个数小于等于 4 时，qsort() 就退化为插入排序，不再继续用递归来做快速排序")])]),v._v(" "),l("h2",{attrs:{id:"二分查找-binary-search"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二分查找-binary-search"}},[v._v("#")]),v._v(" 二分查找 Binary Search")]),v._v(" "),l("ul",[l("li",[v._v("定义：二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0")]),v._v(" "),l("li",[v._v("时间复杂度：O(logn)，查找区间大小逐步减半")]),v._v(" "),l("li",[v._v("局限性\n"),l("ul",[l("li",[v._v("依赖顺序表结构")]),v._v(" "),l("li",[v._v("有序数据")]),v._v(" "),l("li",[v._v("数据量\n"),l("ul",[l("li",[v._v("太小可以遍历")]),v._v(" "),l("li",[v._v("太大存不进去")])])])])])]),v._v(" "),l("h3",{attrs:{id:"递归与非递归实现"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#递归与非递归实现"}},[v._v("#")]),v._v(" 递归与非递归实现")]),v._v(" "),l("ul",[l("li",[v._v("非递归实现 - 循环\n"),l("ul",[l("li",[v._v("注意点：\n"),l("ul",[l("li",[v._v("循环退出条件")]),v._v(" "),l("li",[v._v("mid的取值\n"),l("ul",[l("li",[v._v("low + ((high - low) >> 1)")])])]),v._v(" "),l("li",[v._v("low 和 high的更新\n"),l("ul",[l("li",[v._v("low = mid + 1")]),v._v(" "),l("li",[v._v("high = mid - 1")])])])])])])]),v._v(" "),l("li",[v._v("递归实现\n"),l("ul",[l("li",[v._v("循环改为递归调用判断逻辑")])])])]),v._v(" "),l("h3",{attrs:{id:"查找第一个值给定的元素"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#查找第一个值给定的元素"}},[v._v("#")]),v._v(" 查找第一个值给定的元素")]),v._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[v._v("如果 mid 等于 0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的；如果 mid 不等于 0，但 a[mid]的前一个元素 a[mid-1]不等于 value，那也说明 a[mid]就是我们要找的第一个值等于给定值的元素\n")])]),v._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[v._v("1")]),l("br")])]),l("h3",{attrs:{id:"查找最后一个值等于给定值的元素"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#查找最后一个值等于给定值的元素"}},[v._v("#")]),v._v(" 查找最后一个值等于给定值的元素")]),v._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[v._v("如果 a[mid]这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果 a[mid]的后一个元素 a[mid+1]不等于 value，那也说明 a[mid]就是我们要找的最后一个值等于给定值的元素\n")])]),v._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[v._v("1")]),l("br")])]),l("h3",{attrs:{id:"查找第一个大于等于给定值的元素"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#查找第一个大于等于给定值的元素"}},[v._v("#")]),v._v(" 查找第一个大于等于给定值的元素")]),v._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[v._v("如果 a[mid]小于要查找的值 value，那要查找的值肯定在[mid+1, high]之间，所以，我们更新 low=mid+1。对于 a[mid]大于等于给定值 value 的情况，我们要先看下这个 a[mid]是不是我们要找的第一个值大于等于给定值的元素。如果 a[mid]前面已经没有元素，或者前面一个元素小于要查找的值 value，那 a[mid]就是我们要找的元素\n")])]),v._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[v._v("1")]),l("br")])]),l("h3",{attrs:{id:"查找最后一个小于等于给定值的元素"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#查找最后一个小于等于给定值的元素"}},[v._v("#")]),v._v(" 查找最后一个小于等于给定值的元素")]),v._v(" "),l("p",[v._v("同上")]),v._v(" "),l("h3",{attrs:{id:"总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),l("p",[v._v("二分查找更适合用在“近似”查找问题，在这类问题上，二分查找的优势更加明显。比如今天讲的这几种变体问题，用其他数据结构，比如散列表、二叉树，就比较难实现了")]),v._v(" "),l("h2",{attrs:{id:"跳表-skip-list"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#跳表-skip-list"}},[v._v("#")]),v._v(" 跳表 Skip list")]),v._v(" "),l("ul",[l("li",[v._v("定义：这种链表加多级索引的结构，就是跳表")]),v._v(" "),l("li",[v._v("时间复杂度：O(m*logn) 【m为结点个数】")]),v._v(" "),l("li",[v._v("空间复杂度：O(n)")]),v._v(" "),l("li",[v._v("插入、删除操作的时间复杂度也是 O(logn)")]),v._v(" "),l("li",[v._v("跳表是通过随机函数来维护前面提到的“平衡性”\n"),l("ul",[l("li",[v._v("通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值 K，那我们就将这个结点添加到第一级到第 K 级这 K 级索引中")])])]),v._v(" "),l("li",[v._v("使用空间换时间的设计思路")])]),v._v(" "),l("h2",{attrs:{id:"散列表"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#散列表"}},[v._v("#")]),v._v(" 散列表")]),v._v(" "),l("ul",[l("li",[v._v("散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表")]),v._v(" "),l("li",[v._v("散列函数：key的转换算法\n"),l("ul",[l("li",[v._v("函数设计要求\n"),l("ul",[l("li",[v._v("散列计算为非负整数")]),v._v(" "),l("li",[v._v("key相等则hash相等")]),v._v(" "),l("li",[v._v("key不相等则hash不相等")])])])])]),v._v(" "),l("li",[v._v("散列值：哈希函数计算得到的值")]),v._v(" "),l("li",[v._v("散列冲突\n"),l("ul",[l("li",[v._v("开放寻址法\n"),l("ul",[l("li",[v._v("线性探测 Linear probing\n"),l("ul",[l("li",[v._v("插入：当我们往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止，遍历到尾部都没有找到空闲的位置，于是我们再从表头开始找")]),v._v(" "),l("li",[v._v("查找：找对应下标数据，如果没有就继续查找，直到找到空余位置，则说明不在散列表中")]),v._v(" "),l("li",[v._v("删除：可以将删除的元素，特殊标记为 deleted。当线性探测查找的时候，遇到标记为 deleted 的空间，并不是停下来，而是继续往下探测")])])]),v._v(" "),l("li",[v._v("二次探测 Quadratic probing\n"),l("ul",[l("li",[v._v("定义：跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+12，hash(key)+22")])])]),v._v(" "),l("li",[v._v("双重散列 Double Hashing\n"),l("ul",[l("li",[v._v("使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置")])])]),v._v(" "),l("li",[v._v("装载因子（load factor）\n"),l("ul",[l("li",[v._v("不管采用哪种探测方法，当散列表中空闲位置不多的时候，散列冲突的概率就会大大提高")]),v._v(" "),l("li",[v._v("散列表的装载因子=填入表中的元素个数/散列表的长度")])])])])]),v._v(" "),l("li",[v._v("链表法\n"),l("ul",[l("li",[v._v("定义：在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中")])])])])]),v._v(" "),l("li",[v._v("设计散列函数\n"),l("ul",[l("li",[v._v("散列函数不能太复杂，否则计算时间较长，影响性能")]),v._v(" "),l("li",[v._v("散列函数生成的值要尽可能随机并且均匀分布")]),v._v(" "),l("li",[v._v("方法：\n"),l("ul",[l("li",[v._v("数据分析法")]),v._v(" "),l("li",[v._v("动态扩容\n"),l("ul",[l("li",[v._v("动态申请一倍的哈希表，然后重新插入")]),v._v(" "),l("li",[v._v("时间复杂度是 O(n)")]),v._v(" "),l("li",[v._v("为了避免一次性搬运数据的耗时，可以均摊到每次访问，如果超过阈值，每次访问都在新哈希表中插入，然后搬移旧哈希表中的一个数据")])])])])]),v._v(" "),l("li",[v._v("要求\n"),l("ul",[l("li",[v._v("支持快速地查询、插入、删除操作")]),v._v(" "),l("li",[v._v("内存占用合理，不能浪费过多的内存空间")]),v._v(" "),l("li",[v._v("性能稳定，极端情况下，散列表的性能也不会退化到无法接受的情况")])])]),v._v(" "),l("li",[v._v("实现\n"),l("ul",[l("li",[v._v("设计一个合适的散列函数")]),v._v(" "),l("li",[v._v("定义装载因子阈值，并且设计动态扩容策略")]),v._v(" "),l("li",[v._v("选择合适的散列冲突解决方法")])])])])]),v._v(" "),l("li",[v._v("如何选择冲突解决办法\n"),l("ul",[l("li",[v._v("当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因")]),v._v(" "),l("li",[v._v("基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表")])])]),v._v(" "),l("li",[v._v("java中的哈希表\n"),l("ul",[l("li",[v._v("初始大小 16")]),v._v(" "),l("li",[v._v("装载因子 0.75，每次扩容为原来的两倍")]),v._v(" "),l("li",[v._v("采用链表法解决冲突\n"),l("ul",[l("li",[v._v("数量较多 > 8则使用红黑树，利用快速增删改查的特点")]),v._v(" "),l("li",[v._v("数量较少直接用链表，红黑树要维护平衡，比起链表，性能优势不明显")])])]),v._v(" "),l("li",[v._v("散列函数设计\n"),l("ul",[l("li",[v._v("简单高效、分布均匀")])])]),v._v(" "),l("li",[v._v("无符号右移，与运算，按位异或")])])])]),v._v(" "),l("h2",{attrs:{id:"哈希算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法"}},[v._v("#")]),v._v(" 哈希算法")]),v._v(" "),l("ul",[l("li",[v._v("定义：\n"),l("ul",[l("li",[v._v("将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法")]),v._v(" "),l("li",[v._v("而通过原始数据映射之后得到的二进制值串就是哈希值")])])]),v._v(" "),l("li",[v._v("要求：\n"),l("ul",[l("li",[v._v("从哈希值不能反向推导出原始数据（所以哈希算法也叫单向哈希算法）；")]),v._v(" "),l("li",[v._v("对输入数据非常敏感，哪怕原始数据只修改了一个 Bit，最后得到的哈希值也大不相同；")]),v._v(" "),l("li",[v._v("散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小；")]),v._v(" "),l("li",[v._v("哈希算法的执行效率要尽量高效，针对较长的文本，也能快速地计算出哈希值。")])])]),v._v(" "),l("li",[v._v("MD5 Message-Digest Algorithm\n"),l("ul",[l("li",[v._v("长度：MD5 的哈希值是 128 位的 Bit 长度，为了方便表示，我把它们转化成了 16 进制编码")])])]),v._v(" "),l("li",[v._v("SHA Secure Hash Algorithm")]),v._v(" "),l("li",[v._v("DES（Data Encryption Standard，数据加密标准）")]),v._v(" "),l("li",[v._v("AES（Advanced Encryption Standard，高级加密标准）\n"),l("ul",[l("li",[v._v("用处：安全加密、唯一标识、数据校验、散列函数、负载均衡、数据分片、分布式存储\n"),l("ul",[l("li",[v._v("在分布式存储中，考虑扩容需求，需要了解一致性哈希算法")]),v._v(" "),l("li",[v._v("假设我们有 k 个机器，数据的哈希值的范围是[0, MAX]。我们将整个范围划分成 m 个小区间（m 远大于 k），每个机器负责 m/k 个小区间。当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡")])])])])])]),v._v(" "),l("h2",{attrs:{id:"树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[v._v("#")]),v._v(" 树")]),v._v(" "),l("ul",[l("li",[v._v("把没有父节点的节点叫做根节点")]),v._v(" "),l("li",[v._v("没有子节点的节点叫做叶子节点或者叶节点")]),v._v(" "),l("li",[v._v("高度：结点到叶子结点的最长路径（从下往上），叶子节点为 1")]),v._v(" "),l("li",[v._v("深度：根结点当前结点的边数（从上往下）")]),v._v(" "),l("li",[v._v("层数：深度+1")])]),v._v(" "),l("h3",{attrs:{id:"二叉树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[v._v("#")]),v._v(" 二叉树")]),v._v(" "),l("ul",[l("li",[v._v("每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点")]),v._v(" "),l("li",[v._v("满二叉树：除了叶子节点之外，每个节点都有左右两个子节点")]),v._v(" "),l("li",[v._v("完全二叉树：最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大\n"),l("ul",[l("li",[v._v("如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式")])])]),v._v(" "),l("li",[v._v("存储二叉树\n"),l("ul",[l("li",[v._v("基于指针或者引用的二叉链式存储法\n"),l("ul",[l("li",[v._v("每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针")])])]),v._v(" "),l("li",[v._v("基于数组的顺序存储法\n"),l("ul",[l("li",[v._v("把根节点存储在下标 i = 1 的位置，那左子节点存储在下标 2 "),l("em",[v._v("i = 2 的位置，右子节点存储在 2")]),v._v(" i + 1 = 3 的位置")]),v._v(" "),l("li",[v._v("数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针，这也是为什么完全二叉树会单独拎出来的原因")]),v._v(" "),l("li",[v._v("堆其实就是一种完全二叉树，最常用的存储方式就是数组")])])])])]),v._v(" "),l("li",[v._v("二叉树的遍历\n"),l("ul",[l("li",[v._v("前序遍历：先打印自己，然后打印左子树，然后打印右子树")]),v._v(" "),l("li",[v._v("中序遍历：先打印它的左子树，然后再打印它本身，最后打印它的右子树")]),v._v(" "),l("li",[v._v("后续遍历：对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身")]),v._v(" "),l("li",[v._v("时间复杂度： O(n)")])])]),v._v(" "),l("li",[v._v("特点：支持动态数据集合的快速插入、删除、查找操作")])]),v._v(" "),l("h4",{attrs:{id:"二叉查找树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[v._v("#")]),v._v(" 二叉查找树")]),v._v(" "),l("ul",[l("li",[v._v("在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值")]),v._v(" "),l("li",[v._v("查找、添加、删除\n"),l("ul",[l("li",[v._v("删除针对要删除节点的子节点个数的不同，我们需要分三种情况来处理\n"),l("ul",[l("li",[v._v("如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为 null")]),v._v(" "),l("li",[v._v("如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以")]),v._v(" "),l("li",[v._v("如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点")])])])])]),v._v(" "),l("li",[v._v("键值相同的插入\n"),l("ul",[l("li",[v._v("每个节点存一个链表")]),v._v(" "),l("li",[v._v("将这个要插入的数据放到这个节点的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理\n"),l("ul",[l("li",[v._v("遇到值相同的节点，我们并不停止查找操作，而是继续在右子树中查找，直到遇到叶子节点，才停止。这样就可以把键值等于要查找值的所有节点都找出来")]),v._v(" "),l("li",[v._v("我们也需要先查找到每个要删除的节点，然后再按前面讲的删除操作的方法，依次删除")])])])])]),v._v(" "),l("li",[v._v("相对于散列表的优势\n"),l("ul",[l("li",[v._v("散列表中数据存储无序")]),v._v(" "),l("li",[v._v("散列表扩容耗时较多，遇到散列冲突时性能不稳定")]),v._v(" "),l("li",[v._v("尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快")]),v._v(" "),l("li",[v._v("散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定")]),v._v(" "),l("li",[v._v("散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间")])])])]),v._v(" "),l("h4",{attrs:{id:"红黑树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[v._v("#")]),v._v(" 红黑树")]),v._v(" "),l("p",[v._v("由于极端情况下，二叉树会退化为链表，导致性能下降，故我们需要设计一种平衡二叉查找树来解决这个问题，也就是今天说的这种数据结构")]),v._v(" "),l("ul",[l("li",[v._v("二叉查找树定义：二叉树中任意一个节点的左右子树的高度相差不能大于 1")]),v._v(" "),l("li",[v._v("红黑树定义：\n"),l("ul",[l("li",[v._v("根结点黑色")]),v._v(" "),l("li",[v._v("叶子结点是黑色的空结点")]),v._v(" "),l("li",[v._v("任何相邻结点不能同时为红色")]),v._v(" "),l("li",[v._v("每个节点，从该结点到达叶子结点的所有路径，都包含相同树木的黑色结点")])])])]),v._v(" "),l("h3",{attrs:{id:"递归树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#递归树"}},[v._v("#")]),v._v(" 递归树")]),v._v(" "),l("ul",[l("li",[v._v("定义：把递归一层一层的分解过程画成图，它其实就是一棵树。我们给这棵树起一个名字，叫作递归树")])]),v._v(" "),l("h2",{attrs:{id:"堆"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[v._v("#")]),v._v(" 堆")]),v._v(" "),l("ul",[l("li",[v._v("定义：堆是一种原地排序")]),v._v(" "),l("li",[v._v("时间复杂度\n"),l("ul",[l("li",[v._v("NlogN")]),v._v(" "),l("li",[v._v("插入删除 logN")]),v._v(" "),l("li",[v._v("查找 N")])])]),v._v(" "),l("li",[v._v("大部分情况下快排比堆排序好\n"),l("ul",[l("li",[v._v("堆排序对于数据访问的方式没有快排好")]),v._v(" "),l("li",[v._v("堆排序的数据交换次数多于快排")])])]),v._v(" "),l("li",[v._v("堆是一个完全二叉树")]),v._v(" "),l("li",[v._v("堆中每一个节点的值，必须大于等于其子树中每个节点的值\n"),l("ul",[l("li",[v._v("大顶堆")]),v._v(" "),l("li",[v._v("小顶堆")])])]),v._v(" "),l("li",[v._v("完全二叉树适合用数组存储")]),v._v(" "),l("li",[v._v("插入\n"),l("ul",[l("li",[v._v("插入数据放在最后，然后重新调整，称为堆化")]),v._v(" "),l("li",[v._v("堆化\n"),l("ul",[l("li",[v._v("从下往上\n"),l("ul",[l("li",[v._v("顺着节点所在的路径，向上或者向下，对比，然后交换")])])]),v._v(" "),l("li",[v._v("从上往下")])])])])]),v._v(" "),l("li",[v._v("删除\n"),l("ul",[l("li",[v._v("把最后一个节点放在顶部，然后从上往下堆化，把子节点较大的换上来")])])]),v._v(" "),l("li",[v._v("堆排序\n"),l("ul",[l("li",[v._v("时间复杂度 NlogN")]),v._v(" "),l("li",[v._v("建堆\n"),l("ul",[l("li",[v._v("从上往下，每个节点注此插入")]),v._v(" "),l("li",[v._v("从下往上，从第一个非叶子结点开始（n/2），开始堆化")]),v._v(" "),l("li",[v._v("时间复杂度为O(n)")])])]),v._v(" "),l("li",[v._v("排序\n"),l("ul",[l("li",[v._v("交换堆顶和堆尾元素，重新堆化前面的元素")]),v._v(" "),l("li",[v._v("直到最后只剩下下标为1的元素")]),v._v(" "),l("li",[v._v("不是稳定的排序算法")])])])])]),v._v(" "),l("li",[v._v("经典应用\n"),l("ul",[l("li",[v._v("优先级队列\n"),l("ul",[l("li",[v._v("比如按照大小顺序，合并10个文件")]),v._v(" "),l("li",[v._v("可以用堆维护每个文件的开头字符，然后开始从堆中删除和插入字符，时间复杂度优化为了logn")])])]),v._v(" "),l("li",[v._v("高性能定时器\n"),l("ul",[l("li",[v._v("只比较堆中最快到时间的任务即可")])])]),v._v(" "),l("li",[v._v("top k\n"),l("ul",[l("li",[v._v("维护大小为k的小根堆")]),v._v(" "),l("li",[v._v("比堆定元素大，则把堆顶元素删除，插入堆中")]),v._v(" "),l("li",[v._v("时间复杂度 NlogN")])])]),v._v(" "),l("li",[v._v("求动态维护数据的中位数 / pct99 同理\n"),l("ul",[l("li",[v._v("维护前半部分为一个大顶堆，后半部分为一个小顶堆")]),v._v(" "),l("li",[v._v("插入数据时，比大顶堆根结点大，则放到小顶堆，比大根堆根结点小，则放到大顶堆")]),v._v(" "),l("li",[v._v("然后平衡两个堆，达到大顶堆个数比小顶堆多的要求")]),v._v(" "),l("li",[v._v("插入数据的时间复杂度 logN，读取为 1")])])])])])]),v._v(" "),l("h2",{attrs:{id:"图"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[v._v("#")]),v._v(" 图")]),v._v(" "),l("ul",[l("li",[v._v("顶点：图中的元素")]),v._v(" "),l("li",[v._v("边：顶点间建立的关系")]),v._v(" "),l("li",[v._v("度：顶点相连的边的条数\n"),l("ul",[l("li",[v._v("有向图中称为 入度 和 出度")])])]),v._v(" "),l("li",[v._v("带权图：每条边有权重")]),v._v(" "),l("li",[v._v("存储方法：\n"),l("ul",[l("li",[v._v("邻接矩阵 Adjacency Matrix\n"),l("ul",[l("li",[v._v("底层为二维数组")]),v._v(" "),l("li",[v._v("如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，那我们就将 A[i][j]标记为 1")]),v._v(" "),l("li",[v._v("对于带权图，数组中就存储相应的权重")]),v._v(" "),l("li",[v._v("无向图只需要保存一半的矩阵即可")])])]),v._v(" "),l("li",[v._v("邻接表 Adjacency List\n"),l("ul",[l("li",[v._v("每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点")]),v._v(" "),l("li",[v._v("可以配合逆邻接表来分析入度的关系")])])]),v._v(" "),l("li",[v._v("邻接矩阵存储起来比较浪费空间，但是使用起来比较节省时间。相反，邻接表存储起来比较节省空间，但是使用起来就比较耗时间")])])]),v._v(" "),l("li",[v._v("搜索算法\n"),l("ul",[l("li",[v._v("广度优先 Breadth First Search\n"),l("ul",[l("li",[v._v("V 表示顶点的个数，E 表示边的个数")]),v._v(" "),l("li",[v._v("时间复杂度 V+E => E")]),v._v(" "),l("li",[v._v("空间复杂度 V")])])]),v._v(" "),l("li",[v._v("深度优先 DFS\n"),l("ul",[l("li",[v._v("回溯思想")]),v._v(" "),l("li",[v._v("时间复杂度 E （一次遍历一次回退）")]),v._v(" "),l("li",[v._v("空间复杂度 V")])])])])])]),v._v(" "),l("h2",{attrs:{id:"字符串匹配"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#字符串匹配"}},[v._v("#")]),v._v(" 字符串匹配")]),v._v(" "),l("ul",[l("li",[v._v("主串 / 模式串\n"),l("ul",[l("li",[v._v("比方说，我们在字符串 A 中查找字符串 B，那字符串 A 就是主串，字符串 B 就是模式串")])])]),v._v(" "),l("li",[v._v("单模式串匹配算法\n"),l("ul",[l("li",[v._v("BF（Brute Force）算法\n"),l("ul",[l("li",[v._v("暴力匹配算法")]),v._v(" "),l("li",[v._v("主串的长度记作 n，模式串的长度记作 m，在主串中，检查起始位置分别是 0、1、2…n-m 且长度为 m 的 n-m+1 个子串")]),v._v(" "),l("li",[v._v("最坏情况时间复杂度是 O(n*m)")])])]),v._v(" "),l("li",[v._v("RK（Rabin-Karp）算法\n"),l("ul",[l("li",[v._v("是BF算法的改进")]),v._v(" "),l("li",[v._v("通过哈希算法对主串中的 n-m+1 个子串分别求哈希值，然后逐个与模式串的哈希值比较大小")]),v._v(" "),l("li",[v._v("我们可以用一个 K 进制数来表示一个子串，这个 K 进制数转化成十进制数，作为子串的哈希值")]),v._v(" "),l("li",[v._v("极端情况下，如果存在大量的冲突，每次都要再对比子串和模式串本身，那时间复杂度就会退化成 O(n*m)")])])]),v._v(" "),l("li",[v._v("BM（Boyer-Moore）算法\n"),l("ul",[l("li",[v._v("坏字符规则（bad character rule）\n"),l("ul",[l("li",[v._v("按照模式串下标从大到小的顺序，倒着匹配的")]),v._v(" "),l("li",[v._v("主要思想是判断模式串中是否有字符和主串中尾部字符相同，没有的话可以直接跳过剩余元素比较")]),v._v(" "),l("li",[v._v("最好情况下的时间复杂度非常低，是 O(n/m)")]),v._v(" "),l("li",[v._v("如果主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。不但不会向后滑动模式串，还有可能倒退。所以，BM 算法还需要用到“好后缀规则”")])])]),v._v(" "),l("li",[v._v("好后缀规则（good suffix shift）\n"),l("ul",[l("li",[v._v("已经匹配的 bc 叫作好后缀，记作{u}。我们拿它在模式串中查找，如果找到了另一个跟{u}相匹配的子串{u*}，那我们就将模式串滑动到子串{u*}与主串中{u}对齐的位置")]),v._v(" "),l("li",[v._v("后移匹配中，不仅要看好后缀在模式串中，是否有另一个匹配的子串，我们还要考察好后缀的后缀子串，是否存在跟模式串的前缀子串匹配")])])]),v._v(" "),l("li",[v._v("两个规则的同时使用，可以分别计算好后缀和坏字符往后滑动的位数，然后取两个数中最大的，作为模式串往后滑动的位数")]),v._v(" "),l("li",[v._v("好后缀规则可以独立于坏字符规则使用。因为坏字符规则的实现比较耗内存，为了节省内存，我们可以只用好后缀规则来实现 BM 算法")])])]),v._v(" "),l("li",[v._v("KMP（Knuth Morris Pratt）算法\n"),l("ul",[l("li",[v._v("把不能匹配的那个字符仍然叫作坏字符，把已经匹配的那段字符串叫作好前缀")]),v._v(" "),l("li",[v._v("设最长的可匹配的那部分前缀子串是{v}，长度是 k。我们把模式串一次性往后滑动 j-k 位，相当于，每次遇到坏字符的时候，我们就把 j 更新为 k，i 不变，然后继续比较")]),v._v(" "),l("li",[v._v("失效函数（failure function）\n"),l("ul",[l("li",[v._v("数组的下标是每个前缀结尾字符下标，数组的值是这个前缀的最长可以匹配前缀子串的结尾字符下标")])])]),v._v(" "),l("li",[v._v("空间复杂度是 O(n+m)")])])])])]),v._v(" "),l("li",[v._v("多模式串匹配算法\n"),l("ul",[l("li",[v._v("多模式串匹配算法，就是在多个模式串和一个主串之间做匹配，也就是说，在一个主串中查找多个模式串")]),v._v(" "),l("li",[v._v("Trie 树\n"),l("ul",[l("li",[v._v("又称字典树")]),v._v(" "),l("li",[v._v("解决在一组字符串集合中快速查找某个字符串的问题")]),v._v(" "),l("li",[v._v("Trie 树的本质，就是利用字符串之间的公共前缀，将重复的前缀合并在一起")]),v._v(" "),l("li",[v._v("实现功能\n"),l("ul",[l("li",[v._v("一个将字符串插入到 Trie 树的过程")]),v._v(" "),l("li",[v._v("一个是在 Trie 树中查询一个字符串")])])]),v._v(" "),l("li",[v._v("存储\n"),l("ul",[l("li",[v._v("散列表\n"),l("ul",[l("li",[v._v("通过一个下标与字符一一映射的数组，来存储子节点的指针")]),v._v(" "),l("li",[v._v("也就是每一层子树的子节点都用散列表来存储对应的结点指针")]),v._v(" "),l("li",[v._v("构建时间复杂度 N")]),v._v(" "),l("li",[v._v("查询时间复杂度 K（查询字符串长度）")]),v._v(" "),l("li",[v._v("可以进行缩点优化，把后面没有分叉的子树合并")])])])])])])]),v._v(" "),l("li",[v._v("AC（Aho-Corasick）自动机\n"),l("ul",[l("li",[v._v("高性能敏感词过滤系统")]),v._v(" "),l("li",[v._v("AC 自动机实际上就是在 Trie 树之上，加了类似 KMP 的 next 数组，只不过此处的 next 数组是构建在树上罢了")]),v._v(" "),l("li",[v._v("构建操作\n"),l("ul",[l("li",[v._v("将多个模式串构建成 Trie 树")]),v._v(" "),l("li",[v._v("在 Trie 树上构建失败指针（相当于 KMP 中的失效函数 next 数组）")])])])])])])])]),v._v(" "),l("h2",{attrs:{id:"贪心算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[v._v("#")]),v._v(" 贪心算法")]),v._v(" "),l("ul",[l("li",[v._v("应用\n"),l("ul",[l("li",[v._v("霍夫曼编码（Huffman Coding）")]),v._v(" "),l("li",[v._v("Prim 和 Kruskal 最小生成树算法")]),v._v(" "),l("li",[v._v("Dijkstra 单源最短路径算法")])])]),v._v(" "),l("li",[v._v("在满足限制值的情况下，期望值最大，首先要联想到贪心算法")]),v._v(" "),l("li",[v._v("尝试看下这个问题是否可以用贪心算法解决")]),v._v(" "),l("li",[v._v("我们举几个例子看下贪心算法产生的结果是否是最优的")]),v._v(" "),l("li",[v._v("例子\n"),l("ul",[l("li",[v._v("背包装物品")]),v._v(" "),l("li",[v._v("分糖果\n"),l("ul",[l("li",[v._v("问题描述：我们有 m 个糖果和 n 个孩子。我们现在要把糖果分给这些孩子吃，但是糖果少，孩子多（m < n），所以糖果只能分配给一部分孩子。每个糖果的大小不等，这 m 个糖果的大小分别是 s1，s2，s3，……，sm。除此之外，每个孩子对糖果大小的需求也是不一样的，只有糖果的大小大于等于孩子的对糖果大小的需求的时候，孩子才得到满足。假设这 n 个孩子对糖果大小的需求分别是 g1，g2，g3，……，gn")]),v._v(" "),l("li",[v._v("抽象：从 n 个孩子中，抽取一部分孩子分配糖果，让满足的孩子的个数（期望值）是最大的。这个问题的限制值就是糖果个数 m")]),v._v(" "),l("li",[v._v("解法：我们每次从剩下的孩子中，找出对糖果大小需求最小的，然后发给他剩下的糖果中能满足他的最小的糖果，这样得到的分配方案，也就是满足的孩子个数最多的方案")])])]),v._v(" "),l("li",[v._v("钱币找零\n"),l("ul",[l("li",[v._v("问题描述：在我们的日常生活中更加普遍。假设我们有 1 元、2 元、5 元、10 元、20 元、50 元、100 元这些面额的纸币，它们的张数分别是 c1、c2、c5、c10、c20、c50、c100。我们现在要用这些钱来支付 K 元，最少要用多少张纸币呢")]),v._v(" "),l("li",[v._v("解法：先给大的，后给小的")])])]),v._v(" "),l("li",[v._v("区间覆盖\n"),l("ul",[l("li",[v._v("问题描述：假设我们有 n 个区间，区间的起始端点和结束端点分别是[l1, r1]，[l2, r2]，[l3, r3]，……，[ln, rn]。我们从这 n 个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间呢？")]),v._v(" "),l("li",[v._v("解法：我们每次选择的时候，左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的，这样可以让剩下的未覆盖区间尽可能的大，就可以放置更多的区间。这实际上就是一种贪心的选择方法")])])])])]),v._v(" "),l("li",[v._v("霍夫曼编码\n"),l("ul",[l("li",[v._v("它是如何利用贪心算法来实现对数据压缩编码，有效节省数据存储空间的")]),v._v(" "),l("li",[v._v("定义：\n"),l("ul",[l("li",[v._v("霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。如何给不同频率的字符选择不同长度的编码呢？根据贪心的思想，我们可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码")]),v._v(" "),l("li",[v._v("霍夫曼编码是不等长的，每次应该读取 1 位还是 2 位、3 位等等来解压缩呢？这个问题就导致霍夫曼编码解压缩起来比较复杂。为了避免解压缩过程中的歧义，霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况")])])])])])]),v._v(" "),l("p",[l("img",{attrs:{src:"https://static001.geekbang.org/resource/image/83/45/83921e609c8a4dc81ca5b90c8b4cd745.jpg",alt:"huffman编码图"}})]),v._v(" "),l("h2",{attrs:{id:"分治思想"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分治思想"}},[v._v("#")]),v._v(" 分治思想")]),v._v(" "),l("ul",[l("li",[v._v("MapReduce 是 Google 大数据处理的三驾马车之一，另外两个是 GFS 和 Bigtable\n"),l("ul",[l("li",[v._v("在倒排索引、PageRank 计算、网页分析等搜索引擎相关的技术中都有大量的应用")])])]),v._v(" "),l("li",[v._v("定义：核心思想其实就是四个字，分而治之 ，也就是将原问题划分成 n 个规模较小，并且结构与原问题相似的子问题，递归地解决这些子问题，然后再合并其结果，就得到原问题的解")]),v._v(" "),l("li",[v._v("分治算法是一种处理问题的思想，递归是一种编程技巧")]),v._v(" "),l("li",[v._v("条件：\n"),l("ul",[l("li",[v._v("原问题与分解成的小问题具有相同的模式")]),v._v(" "),l("li",[v._v("原问题分解成的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法跟动态规划的明显区别，等我们讲到动态规划的时候，会详细对比这两种算法")]),v._v(" "),l("li",[v._v("具有分解终止条件，也就是说，当问题足够小时，可以直接求解")]),v._v(" "),l("li",[v._v("可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了")])])]),v._v(" "),l("li",[v._v("例子：\n"),l("ul",[l("li",[v._v("如何编程求出一组数据的有序对个数或者逆序对个数")]),v._v(" "),l("li",[v._v("二维平面上有 n 个点，如何快速计算出两个距离最近的点对")]),v._v(" "),l("li",[v._v("有两个 n "),l("em",[v._v("n 的矩阵 A，B，如何快速求解两个矩阵的乘积 C=A")]),v._v("B？")])])]),v._v(" "),l("li",[v._v("在海量数据处理中的应用\n"),l("ul",[l("li",[v._v("MapReduce 框架只是一个任务调度器，底层依赖 GFS 来存储数据，依赖 Borg 管理机器。它从 GFS 中拿数据，交给 Borg 中的机器执行，并且时刻监控机器执行的进度，一旦出现机器宕机、进度卡壳等，就重新从 Borg 中调度一台机器执行")])])])]),v._v(" "),l("h2",{attrs:{id:"回溯算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[v._v("#")]),v._v(" 回溯算法")]),v._v(" "),l("ul",[l("li",[v._v("例子：深度优先搜索 / 数独 / 八皇后 / 01背包 / 图的着色 / 旅行商问题 / 全排列")]),v._v(" "),l("li",[v._v("回溯算法很多时候都应用在“搜索”这类问题上")]),v._v(" "),l("li",[v._v("回溯的处理思想，有点类似枚举搜索。我们枚举所有的解，找到满足期望的解")]),v._v(" "),l("li",[v._v("01背包\n"),l("ul",[l("li",[v._v("物品可以分割的话，用贪心算法即可，但是01代表不可分割")]),v._v(" "),l("li",[v._v("对于每个物品来说，都有两种选择，装进背包或者不装进背包。对于 n 个物品来说，总的装法就有 2^n 种，去掉总重量超过 Wkg 的，从剩下的装法中选择总重量最接近 Wkg 的")]),v._v(" "),l("li",[v._v("使用遍历思想找到maxValue")])])]),v._v(" "),l("li",[v._v("正则匹配\n"),l("ul",[l("li",[v._v("正则表达式中只包含“*”和“?”这两种通配符，并且对这两个通配符的语义稍微做些改变，其中，“*”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符")]),v._v(" "),l("li",[v._v("遇到特殊字符的时候，我们就有多种处理方式了，也就是所谓的岔路口，比如“*”有多种匹配方案，可以匹配任意个文本串中的字符，我们就先随意的选择一种匹配方案，然后继续考察剩下的字符。如果中途发现无法继续匹配下去了，我们就回到这个岔路口，重新选择一种匹配方案，然后再继续匹配剩下的字符")])])])]),v._v(" "),l("h2",{attrs:{id:"动态规划-dynamic-programming"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#动态规划-dynamic-programming"}},[v._v("#")]),v._v(" 动态规划 Dynamic Programming")]),v._v(" "),l("ul",[l("li",[v._v("动态规划比较适合用来求解最优问题，比如求最大值、最小值等等。它可以非常显著地降低时间复杂度，提高代码的执行效率")]),v._v(" "),l("li",[v._v("01背包问题\n"),l("ul",[l("li",[v._v("用回溯法，会有很多子解法重复计算了")]),v._v(" "),l("li",[v._v("可以用哈希表保存子结果，可以优化算法")]),v._v(" "),l("li",[v._v("也可以使用动态规划\n"),l("ul",[l("li",[v._v("是用二维数组保存背包放置情况的标示，层层遍历得到结果，在最后一层中找到最接近w的值")]),v._v(" "),l("li",[v._v("通过当前阶段的状态集合，来推导下一个阶段的状态集合，动态地往前推进")]),v._v(" "),l("li",[v._v("时间复杂度 O(2^n) => O(n*w)")]),v._v(" "),l("li",[v._v("变式：加上商品价值，可以用价值代替状态存储在二维数组中")])])])])]),v._v(" "),l("li",[v._v("适合动态规划解决的问题特征\n"),l("ul",[l("li",[v._v("多阶段决策最优解模型")]),v._v(" "),l("li",[v._v("最优子结构：\n"),l("ul",[l("li",[v._v("可以通过子问题的最优解，推导出问题的最优解")]),v._v(" "),l("li",[v._v("后面阶段的状态可以通过前面阶段的状态推导出来")])])]),v._v(" "),l("li",[v._v("无后效性：\n"),l("ul",[l("li",[v._v("在推导后面阶段的状态的时候，我们只关心前面阶段的状态值，不关心这个状态是怎么一步一步推导出来的")]),v._v(" "),l("li",[v._v("某阶段状态一旦确定，就不受之后阶段的决策影响。")])])]),v._v(" "),l("li",[v._v("重复子问题\n"),l("ul",[l("li",[v._v("不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态")])])])])]),v._v(" "),l("li",[v._v("举例\n"),l("ul",[l("li",[v._v("矩阵从左上角移动到右下角，最小的路径和\n"),l("ul",[l("li",[v._v("min_dist(i, j) = w[i][j] + min(min_dist(i, j-1), min_dist(i-1, j))")])])])])]),v._v(" "),l("li",[v._v("解法\n"),l("ul",[l("li",[v._v("状态转移表法\n"),l("ul",[l("li",[v._v("先画出一个状态表。状态表一般都是二维的，所以你可以把它想象成二维数组")]),v._v(" "),l("li",[v._v("每个状态包含三个变量，行、列、数组值")]),v._v(" "),l("li",[v._v("根据决策的先后过程，从前往后，根据递推关系，分阶段填充状态表中的每个状态")])])]),v._v(" "),l("li",[v._v("状态转移方程法\n"),l("ul",[l("li",[v._v("递归加“备忘录”：用公式推导计算过程，不使用矩阵存储")]),v._v(" "),l("li",[v._v("迭代递推")])])])])]),v._v(" "),l("li",[v._v("实战\n"),l("ul",[l("li",[v._v("比较字符串相似程度")]),v._v(" "),l("li",[v._v("编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）")]),v._v(" "),l("li",[v._v("莱文斯坦距离（Levenshtein distance）\n"),l("ul",[l("li",[v._v("支持增删替")]),v._v(" "),l("li",[v._v("多阶段决策最优解模型")]),v._v(" "),l("li",[v._v("状态转移有四种情况\n"),l("ul",[l("li",[v._v("对比字符相同")]),v._v(" "),l("li",[v._v("对比字符不同，a加上b中的字符")]),v._v(" "),l("li",[v._v("对比字符不同，a替换b中的字符")]),v._v(" "),l("li",[v._v("对比字符不同，a删掉b中的不同的字符")])])])])]),v._v(" "),l("li",[v._v("最长公共子串长度（Longest common substring length）")])])])]),v._v(" "),l("h2",{attrs:{id:"拓扑排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[v._v("#")]),v._v(" 拓扑排序")]),v._v(" "),l("ul",[l("li",[v._v("问题：确认文件依赖关系")]),v._v(" "),l("li",[v._v("拓扑排序本身就是基于有向无环图的一个算法")]),v._v(" "),l("li",[v._v("实现：\n"),l("ul",[l("li",[v._v("Kahn 康恩算法\n"),l("ul",[l("li",[v._v("基于贪心思想")]),v._v(" "),l("li",[v._v("先从图中，找出一个入度为 0 的顶点，将其输出到拓扑排序的结果序列中（对应代码中就是把它打印出来），并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的入度都减 1）。我们循环执行上面的过程，直到所有的顶点都被输出。最后输出的序列，就是满足局部依赖关系的拓扑排序")])])]),v._v(" "),l("li",[v._v("DFS深度优先搜索算法\n"),l("ul",[l("li",[v._v("第一部分是通过邻接表构造逆邻接表。邻接表中，边 s->t 表示 s 先于 t 执行，也就是 t 要依赖 s。在逆邻接表中，边 s->t 表示 s 依赖于 t，s 后于 t 执行。为什么这么转化呢？这个跟我们这个算法的实现思想有关")]),v._v(" "),l("li",[v._v("第二部分是这个算法的核心，也就是递归处理每个顶点。对于顶点 vertex 来说，我们先输出它可达的所有顶点，也就是说，先把它依赖的所有的顶点输出了，然后再输出自己")])])])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);